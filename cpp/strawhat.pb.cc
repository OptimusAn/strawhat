// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strawhat.proto

#include "strawhat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace strawhat {
constexpr Strawhat::Strawhat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serviceid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , protocol_(0)
{}
struct StrawhatDefaultTypeInternal {
  constexpr StrawhatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StrawhatDefaultTypeInternal() {}
  union {
    Strawhat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StrawhatDefaultTypeInternal _Strawhat_default_instance_;
}  // namespace strawhat
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_strawhat_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_strawhat_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_strawhat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_strawhat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::strawhat::Strawhat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::strawhat::Strawhat, serviceid_),
  PROTOBUF_FIELD_OFFSET(::strawhat::Strawhat, protocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::strawhat::Strawhat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::strawhat::_Strawhat_default_instance_),
};

const char descriptor_table_protodef_strawhat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016strawhat.proto\022\010strawhat\"C\n\010Strawhat\022\021"
  "\n\tserviceID\030\001 \001(\t\022$\n\010protocol\030\002 \001(\0162\022.st"
  "rawhat.Protocol*\034\n\010Protocol\022\007\n\003Tcp\020\000\022\007\n\003"
  "Udp\020\001B\014Z\n./strawhatb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_strawhat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_strawhat_2eproto = {
  false, false, 147, descriptor_table_protodef_strawhat_2eproto, "strawhat.proto", 
  &descriptor_table_strawhat_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_strawhat_2eproto::offsets,
  file_level_metadata_strawhat_2eproto, file_level_enum_descriptors_strawhat_2eproto, file_level_service_descriptors_strawhat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_strawhat_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_strawhat_2eproto);
  return descriptor_table_strawhat_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_strawhat_2eproto(&descriptor_table_strawhat_2eproto);
namespace strawhat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_strawhat_2eproto);
  return file_level_enum_descriptors_strawhat_2eproto[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Strawhat::_Internal {
 public:
};

Strawhat::Strawhat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:strawhat.Strawhat)
}
Strawhat::Strawhat(const Strawhat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serviceid().empty()) {
    serviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serviceid(), 
      GetArena());
  }
  protocol_ = from.protocol_;
  // @@protoc_insertion_point(copy_constructor:strawhat.Strawhat)
}

void Strawhat::SharedCtor() {
serviceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
protocol_ = 0;
}

Strawhat::~Strawhat() {
  // @@protoc_insertion_point(destructor:strawhat.Strawhat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Strawhat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serviceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Strawhat::ArenaDtor(void* object) {
  Strawhat* _this = reinterpret_cast< Strawhat* >(object);
  (void)_this;
}
void Strawhat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Strawhat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Strawhat::Clear() {
// @@protoc_insertion_point(message_clear_start:strawhat.Strawhat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serviceid_.ClearToEmpty();
  protocol_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Strawhat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serviceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "strawhat.Strawhat.serviceID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .strawhat.Protocol protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::strawhat::Protocol>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Strawhat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:strawhat.Strawhat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serviceID = 1;
  if (this->serviceid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceid().data(), static_cast<int>(this->_internal_serviceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "strawhat.Strawhat.serviceID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serviceid(), target);
  }

  // .strawhat.Protocol protocol = 2;
  if (this->protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:strawhat.Strawhat)
  return target;
}

size_t Strawhat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:strawhat.Strawhat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serviceID = 1;
  if (this->serviceid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceid());
  }

  // .strawhat.Protocol protocol = 2;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Strawhat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:strawhat.Strawhat)
  GOOGLE_DCHECK_NE(&from, this);
  const Strawhat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Strawhat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:strawhat.Strawhat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:strawhat.Strawhat)
    MergeFrom(*source);
  }
}

void Strawhat::MergeFrom(const Strawhat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:strawhat.Strawhat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serviceid().size() > 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
}

void Strawhat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:strawhat.Strawhat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Strawhat::CopyFrom(const Strawhat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:strawhat.Strawhat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strawhat::IsInitialized() const {
  return true;
}

void Strawhat::InternalSwap(Strawhat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serviceid_.Swap(&other->serviceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(protocol_, other->protocol_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Strawhat::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace strawhat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::strawhat::Strawhat* Arena::CreateMaybeMessage< ::strawhat::Strawhat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::strawhat::Strawhat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
