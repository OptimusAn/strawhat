// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strawhat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_strawhat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_strawhat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_strawhat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_strawhat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_strawhat_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_strawhat_2eproto_metadata_getter(int index);
namespace strawhat {
class Strawhat;
struct StrawhatDefaultTypeInternal;
extern StrawhatDefaultTypeInternal _Strawhat_default_instance_;
}  // namespace strawhat
PROTOBUF_NAMESPACE_OPEN
template<> ::strawhat::Strawhat* Arena::CreateMaybeMessage<::strawhat::Strawhat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace strawhat {

enum Protocol : int {
  Empty = 0,
  Tcp = 1,
  Udp = 3,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = Empty;
constexpr Protocol Protocol_MAX = Udp;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
// ===================================================================

class Strawhat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:strawhat.Strawhat) */ {
 public:
  inline Strawhat() : Strawhat(nullptr) {}
  virtual ~Strawhat();
  explicit constexpr Strawhat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Strawhat(const Strawhat& from);
  Strawhat(Strawhat&& from) noexcept
    : Strawhat() {
    *this = ::std::move(from);
  }

  inline Strawhat& operator=(const Strawhat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strawhat& operator=(Strawhat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Strawhat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Strawhat* internal_default_instance() {
    return reinterpret_cast<const Strawhat*>(
               &_Strawhat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Strawhat& a, Strawhat& b) {
    a.Swap(&b);
  }
  inline void Swap(Strawhat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Strawhat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Strawhat* New() const final {
    return CreateMaybeMessage<Strawhat>(nullptr);
  }

  Strawhat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Strawhat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Strawhat& from);
  void MergeFrom(const Strawhat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Strawhat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "strawhat.Strawhat";
  }
  protected:
  explicit Strawhat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_strawhat_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIDFieldNumber = 1,
    kProtocolFieldNumber = 2,
  };
  // string serviceID = 1;
  void clear_serviceid();
  const std::string& serviceid() const;
  void set_serviceid(const std::string& value);
  void set_serviceid(std::string&& value);
  void set_serviceid(const char* value);
  void set_serviceid(const char* value, size_t size);
  std::string* mutable_serviceid();
  std::string* release_serviceid();
  void set_allocated_serviceid(std::string* serviceid);
  private:
  const std::string& _internal_serviceid() const;
  void _internal_set_serviceid(const std::string& value);
  std::string* _internal_mutable_serviceid();
  public:

  // .strawhat.Protocol protocol = 2;
  void clear_protocol();
  ::strawhat::Protocol protocol() const;
  void set_protocol(::strawhat::Protocol value);
  private:
  ::strawhat::Protocol _internal_protocol() const;
  void _internal_set_protocol(::strawhat::Protocol value);
  public:

  // @@protoc_insertion_point(class_scope:strawhat.Strawhat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceid_;
  int protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_strawhat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Strawhat

// string serviceID = 1;
inline void Strawhat::clear_serviceid() {
  serviceid_.ClearToEmpty();
}
inline const std::string& Strawhat::serviceid() const {
  // @@protoc_insertion_point(field_get:strawhat.Strawhat.serviceID)
  return _internal_serviceid();
}
inline void Strawhat::set_serviceid(const std::string& value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:strawhat.Strawhat.serviceID)
}
inline std::string* Strawhat::mutable_serviceid() {
  // @@protoc_insertion_point(field_mutable:strawhat.Strawhat.serviceID)
  return _internal_mutable_serviceid();
}
inline const std::string& Strawhat::_internal_serviceid() const {
  return serviceid_.Get();
}
inline void Strawhat::_internal_set_serviceid(const std::string& value) {
  
  serviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Strawhat::set_serviceid(std::string&& value) {
  
  serviceid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:strawhat.Strawhat.serviceID)
}
inline void Strawhat::set_serviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:strawhat.Strawhat.serviceID)
}
inline void Strawhat::set_serviceid(const char* value,
    size_t size) {
  
  serviceid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:strawhat.Strawhat.serviceID)
}
inline std::string* Strawhat::_internal_mutable_serviceid() {
  
  return serviceid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Strawhat::release_serviceid() {
  // @@protoc_insertion_point(field_release:strawhat.Strawhat.serviceID)
  return serviceid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Strawhat::set_allocated_serviceid(std::string* serviceid) {
  if (serviceid != nullptr) {
    
  } else {
    
  }
  serviceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serviceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:strawhat.Strawhat.serviceID)
}

// .strawhat.Protocol protocol = 2;
inline void Strawhat::clear_protocol() {
  protocol_ = 0;
}
inline ::strawhat::Protocol Strawhat::_internal_protocol() const {
  return static_cast< ::strawhat::Protocol >(protocol_);
}
inline ::strawhat::Protocol Strawhat::protocol() const {
  // @@protoc_insertion_point(field_get:strawhat.Strawhat.protocol)
  return _internal_protocol();
}
inline void Strawhat::_internal_set_protocol(::strawhat::Protocol value) {
  
  protocol_ = value;
}
inline void Strawhat::set_protocol(::strawhat::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:strawhat.Strawhat.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace strawhat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::strawhat::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::strawhat::Protocol>() {
  return ::strawhat::Protocol_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_strawhat_2eproto
