// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strawhat.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Strawhat.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StrawhatRoot

@implementation StrawhatRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - StrawhatRoot_FileDescriptor

static GPBFileDescriptor *StrawhatRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"strawhat"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Transport

GPBEnumDescriptor *Transport_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Empty\000Tcp\000Udp\000";
    static const int32_t values[] = {
        Transport_Empty,
        Transport_Tcp,
        Transport_Udp,
    };
    static const char *extraTextFormatInfo = "\003\000\005\000\001\003\000\002\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Transport)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Transport_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Transport_IsValidValue(int32_t value__) {
  switch (value__) {
    case Transport_Empty:
    case Transport_Tcp:
    case Transport_Udp:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Strawhat

@implementation Strawhat

@dynamic serviceId;
@dynamic transport;

typedef struct Strawhat__storage_ {
  uint32_t _has_storage_[1];
  Transport transport;
  NSString *serviceId;
} Strawhat__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "serviceId",
        .dataTypeSpecific.clazz = Nil,
        .number = Strawhat_FieldNumber_ServiceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Strawhat__storage_, serviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transport",
        .dataTypeSpecific.enumDescFunc = Transport_EnumDescriptor,
        .number = Strawhat_FieldNumber_Transport,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Strawhat__storage_, transport),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Strawhat class]
                                     rootClass:[StrawhatRoot class]
                                          file:StrawhatRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Strawhat__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\010A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Strawhat_Transport_RawValue(Strawhat *message) {
  GPBDescriptor *descriptor = [Strawhat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Strawhat_FieldNumber_Transport];
  return GPBGetMessageRawEnumField(message, field);
}

void SetStrawhat_Transport_RawValue(Strawhat *message, int32_t value) {
  GPBDescriptor *descriptor = [Strawhat descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Strawhat_FieldNumber_Transport];
  GPBSetMessageRawEnumField(message, field, value);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
