// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: strawhat.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Strawhat {

  /// <summary>Holder for reflection information generated from strawhat.proto</summary>
  public static partial class StrawhatReflection {

    #region Descriptor
    /// <summary>File descriptor for strawhat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StrawhatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5zdHJhd2hhdC5wcm90bxIIc3RyYXdoYXQiQwoIU3RyYXdoYXQSEQoJc2Vy",
            "dmljZUlEGAEgASgJEiQKCHByb3RvY29sGAIgASgOMhIuc3RyYXdoYXQuUHJv",
            "dG9jb2wqHAoIUHJvdG9jb2wSBwoDVGNwEAASBwoDVWRwEAFCDFoKLi9zdHJh",
            "d2hhdGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Strawhat.Protocol), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Strawhat.Strawhat), global::Strawhat.Strawhat.Parser, new[]{ "ServiceID", "Protocol" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Protocol {
    [pbr::OriginalName("Tcp")] Tcp = 0,
    [pbr::OriginalName("Udp")] Udp = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Strawhat : pb::IMessage<Strawhat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Strawhat> _parser = new pb::MessageParser<Strawhat>(() => new Strawhat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Strawhat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Strawhat.StrawhatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strawhat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strawhat(Strawhat other) : this() {
      serviceID_ = other.serviceID_;
      protocol_ = other.protocol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Strawhat Clone() {
      return new Strawhat(this);
    }

    /// <summary>Field number for the "serviceID" field.</summary>
    public const int ServiceIDFieldNumber = 1;
    private string serviceID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceID {
      get { return serviceID_; }
      set {
        serviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 2;
    private global::Strawhat.Protocol protocol_ = global::Strawhat.Protocol.Tcp;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Strawhat.Protocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Strawhat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Strawhat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceID != other.ServiceID) return false;
      if (Protocol != other.Protocol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceID.Length != 0) hash ^= ServiceID.GetHashCode();
      if (Protocol != global::Strawhat.Protocol.Tcp) hash ^= Protocol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceID);
      }
      if (Protocol != global::Strawhat.Protocol.Tcp) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Protocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceID);
      }
      if (Protocol != global::Strawhat.Protocol.Tcp) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Protocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceID);
      }
      if (Protocol != global::Strawhat.Protocol.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Strawhat other) {
      if (other == null) {
        return;
      }
      if (other.ServiceID.Length != 0) {
        ServiceID = other.ServiceID;
      }
      if (other.Protocol != global::Strawhat.Protocol.Tcp) {
        Protocol = other.Protocol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceID = input.ReadString();
            break;
          }
          case 16: {
            Protocol = (global::Strawhat.Protocol) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceID = input.ReadString();
            break;
          }
          case 16: {
            Protocol = (global::Strawhat.Protocol) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
